---
// This is the definitive version. It uses a clean nested structure and lets the CSS
// handle the entire, correct animation lifecycle.
---
<div class="stars"></div>
<div class="twinkling"></div>
<div id="night-sky" class="night"></div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const nightSky = document.getElementById('night-sky');
    if (!nightSky) return;

    const NUM_STARS = 3;

    const resetStar = (placer) => {
      placer.classList.remove('animate');
      void placer.offsetWidth; // Force browser reflow

      const rotator = placer.querySelector('.star-rotator');
      const star = placer.querySelector('.shooting_star');
      
      if (rotator && star) {
        const vw = window.innerWidth;
        const vh = window.innerHeight;

        // 1. Position the Placer
        placer.style.setProperty('--x', `${Math.random() * vw}px`);
        placer.style.setProperty('--y', `${Math.random() * vh}px`);

        // 2. Rotate the Rotator
        rotator.style.setProperty('--angle', `${Math.random() * 360}deg`);

        // 3. Set the animation duration for the Star and its bloom
        const duration = Math.random() * 4000 + 3000; // 3 to 7 seconds
        star.style.animationDuration = `${duration}ms`;

        // Start the entire animation cycle
        placer.classList.add('animate');
      }
    };

    // --- Main Setup ---
    for (let i = 0; i < NUM_STARS; i++) {
      const placer = document.createElement('div');
      placer.className = 'star-placer';

      const rotator = document.createElement('div');
      rotator.className = 'star-rotator';

      const star = document.createElement('div');
      star.className = 'shooting_star';

      rotator.appendChild(star);
      placer.appendChild(rotator);
      nightSky.appendChild(placer);

      // Listen for when the animation cycle on the STAR element finishes
      star.addEventListener('animationend', (event) => {
        // We only care about one animation ending to prevent multiple triggers
        if (event.animationName === 'shooting-path') {
          // Once the star has finished its life, wait a bit, then reset it
          const delay = Math.random() * 20000 + 10000;
          setTimeout(() => resetStar(placer), delay);
        }
      });

      // Stagger the initial start of each star
      setTimeout(() => resetStar(placer), Math.random() * 7000);
    }
  });
</script>
